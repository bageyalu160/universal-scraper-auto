name: '"advanced_antidetect" 爬虫'
run-name: '🕷️ "advanced_antidetect" 爬虫 #${{ github.run_number }} (${{ github.actor
  }})'
on:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:
    inputs:
      date:
        description: 数据日期 (留空则使用当前日期)
        required: false
        type: string
      use_proxy:
        default: false
        description: 是否使用代理
        required: false
        type: boolean
permissions:
  actions: write
  contents: write
env:
  CONFIG_DIR: config
  DATA_DIR: data/daily
  ENGINE_TYPE: custom
  LOGS_DIR: logs
  PROXY_ENABLED: false
  PYTHONUNBUFFERED: 1
  SITES_DIR: config/sites
  SITE_ID: '"advanced_antidetect"'
  STATUS_DIR: status
  WORKFLOW_TYPE: crawler
concurrency:
  cancel-in-progress: true
  group: crawler-"advanced_antidetect"-${{ github.ref }}
jobs:
  crawl:
    name: 运行爬虫
    if: always() && needs.pre-check.outputs.site_config_valid == 'true' && (needs.check-proxy.result
      == 'success' || needs.pre-check.outputs.use_proxy != 'true')
    needs:
      - pre-check
      - check-proxy
    runs-on: ubuntu-latest
    env:
      RUN_DATE: ${{ needs.pre-check.outputs.run_date }}
      USE_PROXY: ${{ needs.pre-check.outputs.use_proxy }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: '3.10'
      - if: true
        name: 缓存依赖和数据
        uses: actions/cache@v3
        with:
          key: crawler-deps-"advanced_antidetect"-custom-${{ hashFiles('requirements.txt')
            }}
          path: "~/.cache/pip\ndata/\"advanced_antidetect\"/cache"
          restore-keys: crawler-deps-"advanced_antidetect"-custom-
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "安装必要的依赖..."
            pip install ["requests>=2.31.0", "beautifulsoup4>=4.12.2", "lxml>=4.9.3", "fake-useragent>=1.0.0"]
          fi
      - name: 创建必要目录
        run: |-
          mkdir -p data/"advanced_antidetect"
          mkdir -p status/"advanced_antidetect"
          mkdir -p logs
      - continue-on-error: true
        env: {}
        id: run_scraper
        name: 运行爬虫
        run: |
          echo "🕷️ 开始爬取数据: "advanced_antidetect""
          echo "📅 运行日期: $RUN_DATE"
          echo "🔄 使用代理: $USE_PROXY"

          # 构建命令参数
          PROXY_ARG=""
          if [ "$USE_PROXY" = "true" ] && [ -f "data/proxies/proxy_pool.json" ]; then
            PROXY_ARG="--proxy-file data/proxies/proxy_pool.json"
            echo "📋 使用代理池文件"
          fi

          # 执行爬虫
          python scripts/scraper.py \
            --site "advanced_antidetect" \
            --date "$RUN_DATE" \
            --output "data/"advanced_antidetect"/data/advanced_antidetect_data.json" \
            --status "status/"advanced_antidetect"/status.json" \
            --log-file "logs/"advanced_antidetect"_$RUN_DATE.log" \
            $PROXY_ARG

          # 检查结果
          if [ -f "data/"advanced_antidetect"/data/advanced_antidetect_data.json" ]; then
            echo "scraper_success=true" >> $GITHUB_OUTPUT
            echo "✅ 爬虫执行成功"
          else
            echo "scraper_success=false" >> $GITHUB_OUTPUT
            echo "❌ 爬虫执行失败或无数据"
          fi
      - if: steps.run_scraper.outputs.scraper_success == 'true'
        name: 上传数据文件
        uses: actions/upload-artifact@v4
        with:
          name: '"advanced_antidetect"-data-${{ needs.pre-check.outputs.run_date }}'
          path: data/"advanced_antidetect"/data/advanced_antidetect_data.json
          retention-days: 7
      - name: 上传状态文件
        uses: actions/upload-artifact@v4
        with:
          name: '"advanced_antidetect"-status-${{ needs.pre-check.outputs.run_date
            }}'
          path: status/"advanced_antidetect"/status.json
          retention-days: 7
      - name: 上传日志文件
        uses: actions/upload-artifact@v4
        with:
          name: '"advanced_antidetect"-logs-${{ needs.pre-check.outputs.run_date }}'
          path: logs/"advanced_antidetect"_${{ needs.pre-check.outputs.run_date }}.log
          retention-days: 3
      - name: 提交更改
        run: |
          # 配置Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 添加文件
          git add data/advanced_antidetect/
          git add status/advanced_antidetect/

          # 提交更改
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
          else
            git commit -m "🤖 自动更新: "advanced_antidetect"爬虫结果 ($RUN_DATE)"
            git push
            echo "✅ 成功提交更改"
          fi
  check-proxy:
    name: 检查代理可用性
    if: needs.pre-check.outputs.use_proxy == 'true'
    needs:
      - pre-check
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: '3.10'
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "安装必要的依赖..."
            pip install requests pyyaml
          fi
      - name: 创建必要目录
        run: |-
          mkdir -p data/proxies
          mkdir -p status/proxies
          mkdir -p logs
      - id: check_proxy_pool
        name: 检查代理池状态
        run: |
          # 检查代理状态文件是否存在
          if [ -f "status/proxies/pool_status.json" ]; then
            echo "找到代理池状态文件"
            
            # 检查可用代理数量
            VALID_COUNT=$(jq '.valid_count' status/proxies/pool_status.json)
            THRESHOLD=5
            
            echo "当前有效代理数: $VALID_COUNT"
            echo "最低需求阈值: $THRESHOLD"
            
            if [ "$VALID_COUNT" -ge "$THRESHOLD" ]; then
              echo "✅ 代理池状态良好，有足够的代理"
              echo "sufficient=true" >> $GITHUB_OUTPUT
            else
              echo "⚠️ 代理池中的有效代理不足，需要更新"
              echo "sufficient=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ 未找到代理池状态文件，需要初始化代理池"
            echo "sufficient=false" >> $GITHUB_OUTPUT
          fi
      - if: steps.check_proxy_pool.outputs.sufficient == 'false'
        name: 更新代理池
        run: |
          echo "开始更新代理池..."

          # 尝试执行更新，如果失败则尝试恢复
          python scripts/proxy_manager.py update --min-count 10 --timeout 10

          # 检查更新后的状态
          if [ -f "status/proxies/pool_status.json" ]; then
            valid_count=$(jq '.valid_count' status/proxies/pool_status.json)
            echo "更新后的有效代理数: $valid_count"
            
            # 如果更新后代理仍然不足，尝试恢复备份
            if [ "$valid_count" -lt "5" ] && [ -f "data/proxies/proxy_pool_backup.json" ]; then
              echo "⚠️ 更新后代理仍然不足，尝试恢复备份..."
              cp data/proxies/proxy_pool_backup.json data/proxies/proxy_pool.json
              python scripts/proxy_manager.py validate --timeout 5
              
              if [ -f "status/proxies/pool_status.json" ]; then
                valid_count=$(jq '.valid_count' status/proxies/pool_status.json)
                echo "恢复备份后的有效代理数: $valid_count"
              fi
            fi
            
            echo "更新后的有效代理数: $valid_count"
          else
            echo "⚠️ 更新后仍未找到代理池状态文件"
          fi
      - name: 提交更改
        run: |
          # 配置Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 添加文件
          git add data/proxies/
          git add status/proxies/

          # 提交更改
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
          else
            git commit -m "🔄 爬虫任务前的代理池更新 (站点: "advanced_antidetect")"
            git push
            echo "✅ 成功提交更改"
          fi
  pre-check:
    name: 环境与配置检查
    runs-on: ubuntu-latest
    outputs:
      cache_key: ${{ steps.prepare_env.outputs.cache_key }}
      run_date: ${{ steps.prepare_env.outputs.date }}
      site_config_valid: ${{ steps.validate_config.outputs.valid }}
      use_proxy: ${{ steps.prepare_env.outputs.use_proxy }}
    timeout-minutes: 10
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - id: prepare_env
        name: 准备环境变量
        run: |
          # 设置运行日期
          if [ -n "${{ github.event.inputs.date }}" ]; then
            echo "使用指定日期: ${{ github.event.inputs.date }}"
            echo "date=${{ github.event.inputs.date }}" >> $GITHUB_OUTPUT
          else
            echo "使用当前日期"
            echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          fi

          # 生成缓存键
          if [ -f "requirements.txt" ]; then
            HASH=$(sha256sum requirements.txt | cut -d ' ' -f 1 | head -c 8)
            echo "cache_key=deps-"advanced_antidetect"-$HASH-v1" >> $GITHUB_OUTPUT
          else
            echo "cache_key=deps-"advanced_antidetect"-default-v1" >> $GITHUB_OUTPUT
          fi

          # 设置是否使用代理
          USE_PROXY="${{ github.event.inputs.use_proxy || 'false' }}"
          echo "use_proxy=$USE_PROXY" >> $GITHUB_OUTPUT
          echo "代理使用设置: $USE_PROXY"
      - id: validate_config
        name: 验证站点配置
        run: |
          if [ -f "config/sites/"advanced_antidetect".yaml" ]; then
            echo "✅ 站点配置有效"
            echo "valid=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 站点配置文件不存在"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
