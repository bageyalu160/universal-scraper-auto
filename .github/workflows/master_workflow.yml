name: 主调度工作流
run-name: '🚀 主调度工作流 #${{ github.run_number }} (${{ github.actor }})'
on:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:
    inputs:
      action:
        description: 执行操作
        options:
          - crawl_all
          - analyze_all
          - update_dashboard
          - update_proxy_pool
          - full_pipeline
        required: true
        type: choice
      date:
        description: 数据日期 (留空则使用当前日期)
        required: false
        type: string
      site_id:
        description: 站点ID (仅适用于单站点操作)
        required: false
        type: string
permissions:
  actions: write
  contents: write
  id-token: write
  pages: write
env:
  CONFIG_DIR: config
  DATA_DIR: data/daily
  LOGS_DIR: logs
  PYTHONUNBUFFERED: 1
  SITES_DIR: config/sites
  STATUS_DIR: status
  WORKFLOW_TYPE: master
concurrency:
  cancel-in-progress: true
  group: master-workflow-${{ github.ref }}
jobs:
  setup:
    name: 准备环境
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.set-date.outputs.date }}
      sites: ${{ steps.list-sites.outputs.sites }}
    timeout-minutes: 10
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - id: set-date
        name: 设置日期
        run: |
          if [ -n "${{ github.event.inputs.date }}" ]; then
            echo "date=${{ github.event.inputs.date }}" >> $GITHUB_OUTPUT
          else
            echo "date=$(date +%Y-%m-%d)" >> $GITHUB_OUTPUT
          fi
      - id: list-sites
        name: 列出可用站点
        run: |
          if [ -n "${{ github.event.inputs.site_id }}" ]; then
            SITES="[\"${{ github.event.inputs.site_id }}\"]"
          else
            SITES="["
            FIRST=true
            for site in config/sites/*.yaml; do
              SITE_ID=$(basename $site .yaml)
              if [ "$SITE_ID" = "example" ]; then
                continue
              fi
              if [ "$FIRST" = true ]; then
                FIRST=false
              else
                SITES="$SITES,"
              fi
              SITES="$SITES\"$SITE_ID\""
            done
            SITES="$SITES]"
          fi
          echo "sites=$SITES" >> $GITHUB_OUTPUT
          echo "发现站点: $SITES"
      - name: 环境信息收集
        run: |
          echo "=== 环境信息 ==="
          echo "运行时间: $(date)"
          echo "触发方式: ${{ github.event_name }}"
          echo "操作类型: ${{ github.event.inputs.action || '定时任务' }}"
          echo "指定站点: ${{ github.event.inputs.site_id || '全部站点' }}"
          echo "指定日期: ${{ github.event.inputs.date || '当前日期' }}"
          echo "运行ID: ${{ github.run_id }}"
          echo "=== 项目结构检查 ==="
          ls -la config/sites/ | head -10
          echo "=== 数据目录检查 ==="
          if [ -d "data/daily" ]; then
            echo "最近的数据目录:"
            ls -la data/daily/ | tail -5
          else
            echo "数据目录不存在"
          fi
  update_proxy_pool:
    name: 更新代理池
    if: github.event.inputs.action == 'update_proxy_pool' || github.event.inputs.action
      == 'full_pipeline' || github.event_name == 'schedule'
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: 触发代理池更新工作流
        uses: benc-uk/workflow-dispatch@v1
        with:
          inputs: '{"action": "update"}'
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: proxy_pool_manager.yml
  crawl:
    name: 爬取数据
    if: always() && (github.event.inputs.action == 'crawl_all' || github.event.inputs.action
      == 'full_pipeline' || github.event_name == 'schedule') && (needs.update_proxy_pool.result
      == 'success' || needs.update_proxy_pool.result == 'skipped')
    needs:
      - setup
      - update_proxy_pool
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        site_id: ${{ fromJSON(needs.setup.outputs.sites) }}
    steps:
      - name: 触发爬虫工作流
        uses: benc-uk/workflow-dispatch@v1
        with:
          inputs: '{"date": "${{ needs.setup.outputs.date }}"}'
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: crawler_${{ matrix.site_id }}.yml
  analyze:
    name: 分析数据
    if: always() && (github.event.inputs.action == 'analyze_all' || github.event.inputs.action
      == 'full_pipeline' || github.event_name == 'schedule') && (needs.crawl.result
      == 'success' || needs.crawl.result == 'skipped')
    needs:
      - setup
      - crawl
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        site_id: ${{ fromJSON(needs.setup.outputs.sites) }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - id: get-latest-file
        name: 获取最新数据文件
        run: |
          SITE_ID="${{ matrix.site_id }}"
          DATE="${{ needs.setup.outputs.date }}"
          DATA_DIR="data/daily/$DATE"

          echo "=== 数据文件查找 ==="
          echo "站点ID: $SITE_ID"
          echo "数据日期: $DATE"
          echo "数据目录: $DATA_DIR"

          if [ -d "$DATA_DIR" ]; then
            # 查找匹配的数据文件
            DATA_FILE=$(find $DATA_DIR -name "${SITE_ID}*.json" -type f | sort | tail -1)
            
            if [ -n "$DATA_FILE" ]; then
              echo "data_file=$DATA_FILE" >> $GITHUB_OUTPUT
              echo "found=true" >> $GITHUB_OUTPUT
              echo "✅ 找到数据文件: $DATA_FILE"
            else
              echo "data_file=" >> $GITHUB_OUTPUT
              echo "found=false" >> $GITHUB_OUTPUT
              echo "⚠️ 未找到匹配的数据文件"
              echo "尝试查找所有文件:"
              find $DATA_DIR -type f | head -5
            fi
          else
            echo "data_file=" >> $GITHUB_OUTPUT
            echo "found=false" >> $GITHUB_OUTPUT
            echo "⚠️ 数据目录不存在: $DATA_DIR"
            echo "可用的数据目录:"
            if [ -d "data/daily" ]; then
              ls -1 data/daily/ | tail -3
            else
              echo "data/daily 目录不存在"
            fi
          fi
      - if: steps.get-latest-file.outputs.data_file != ''
        name: 触发分析工作流
        uses: benc-uk/workflow-dispatch@v1
        with:
          inputs: "{\n  \"data_date\": \"${{ needs.setup.outputs.date }}\",\n  \"\
            data_file\": \"${{ steps.get-latest-file.outputs.data_file }}\",\n  \"\
            site_id\": \"${{ matrix.site_id }}\"\n}\n"
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: analyzer_${{ matrix.site_id }}.yml
  update_dashboard:
    name: 更新仪表盘
    if: always() && (github.event.inputs.action == 'update_dashboard' || github.event.inputs.action
      == 'full_pipeline' || github.event_name == 'schedule') && (needs.analyze.result
      == 'success' || needs.analyze.result == 'skipped')
    needs:
      - setup
      - analyze
    runs-on: ubuntu-latest
    steps:
      - name: 触发仪表盘更新工作流
        uses: benc-uk/workflow-dispatch@v1
        with:
          inputs: '{"date": "${{ needs.setup.outputs.date }}"}'
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: dashboard.yml
  workflow_summary:
    name: 工作流总结
    if: always()
    needs:
      - setup
      - update_proxy_pool
      - crawl
      - analyze
      - update_dashboard
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 创建必要目录
        run: mkdir -p status/workflow
      - name: 生成执行摘要
        run: |
          echo "=== 🚀 主工作流执行摘要 ==="
          echo "执行日期: ${{ needs.setup.outputs.date }}"
          echo "触发方式: ${{ github.event_name }}"
          echo "操作类型: ${{ github.event.inputs.action || '定时任务' }}"
          echo "处理站点: ${{ needs.setup.outputs.sites }}"
          echo ""
          echo "=== 📊 各步骤执行结果 ==="
          echo "1️⃣ 环境准备: ${{ needs.setup.result }}"
          echo "2️⃣ 代理池更新: ${{ needs.update_proxy_pool.result }}"
          echo "3️⃣ 数据爬取: ${{ needs.crawl.result }}"
          echo "4️⃣ 数据分析: ${{ needs.analyze.result }}"
          echo "5️⃣ 仪表盘更新: ${{ needs.update_dashboard.result }}"
          echo ""
          echo "=== 🔗 相关链接 ==="
          echo "工作流运行: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          if [[ "${{ needs.update_dashboard.result }}" == "success" ]]; then
            echo "监控仪表盘: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          fi
          echo ""

          # 创建状态文件
          mkdir -p status/workflow
          cat > status/workflow/master_workflow_summary.json << EOF
          {
            "workflow_id": "${{ github.run_id }}",
            "trigger": "${{ github.event_name }}",
            "action": "${{ github.event.inputs.action || '定时任务' }}",
            "date": "${{ needs.setup.outputs.date }}",
            "sites": ${{ needs.setup.outputs.sites }},
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "results": {
              "setup": "${{ needs.setup.result }}",
              "proxy_pool": "${{ needs.update_proxy_pool.result }}",
              "crawl": "${{ needs.crawl.result }}",
              "analyze": "${{ needs.analyze.result }}",
              "dashboard": "${{ needs.update_dashboard.result }}"
            },
            "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }
          EOF
          echo "✅ 执行摘要已保存到 status/workflow/master_workflow_summary.json"
      - name: 提交更改
        run: |
          # 配置Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 添加文件
          git add status/workflow/

          # 提交更改
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
          else
            git commit -m "📊 自动更新: 主工作流执行摘要 (${{ needs.setup.outputs.date }})"
            git push
            echo "✅ 成功提交更改"
          fi
  notify_completion:
    name: 通知完成
    if: always()
    needs:
      - setup
      - update_proxy_pool
      - crawl
      - analyze
      - update_dashboard
      - workflow_summary
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      - name: 设置Python
        uses: actions/setup-python@v5
        with:
          cache: pip
          python-version: '3.10'
      - name: 安装依赖
        run: |
          pip install -r requirements.txt
      - env:
          DINGTALK_WEBHOOK_URL: ${{ secrets.DINGTALK_WEBHOOK }}
          FEISHU_WEBHOOK_URL: ${{ secrets.FEISHU_WEBHOOK }}
          WECHAT_WORK_WEBHOOK_URL: ${{ secrets.WECHAT_WEBHOOK }}
        id: send_notification
        name: 准备通知内容并发送
        run: |
          # 创建工作流状态文件
          mkdir -p temp-notification
          cat > temp-notification/master_workflow_status.json << EOF
          {
            "workflow_status": {
              "setup": "${{ needs.setup.result }}",
              "proxy_pool": "${{ needs.update_proxy_pool.result }}",
              "crawl": "${{ needs.crawl.result }}",
              "analyze": "${{ needs.analyze.result }}",
              "dashboard": "${{ needs.update_dashboard.result }}",
              "date": "${{ needs.setup.outputs.date }}",
              "sites": ${{ needs.setup.outputs.sites }},
              "action": "${{ github.event.inputs.action || '定时任务' }}",
              "run_id": "${{ github.run_id }}",
              "run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
          }
          EOF

          # 发送通知
          echo "📢 发送主工作流完成通知..."
          python scripts/notify.py --file "temp-notification/master_workflow_status.json" --site "主工作流"
