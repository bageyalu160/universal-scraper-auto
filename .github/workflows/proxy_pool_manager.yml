name: 代理池管理器

run-name: "🔄 代理池更新 #${{ github.run_number }} (${{ github.actor }})"

on:
  # 定时触发：每4小时运行一次
  schedule:
    - cron: "0 */4 * * *"
  
  # 手动触发
  workflow_dispatch:
    inputs:
      action:
        description: '执行操作'
        required: true
        type: choice
        options:
          - update # 更新代理池
          - validate # 验证现有代理
          - clear # 清空失败的代理
          - rebuild # 完全重建代理池
          - recover # 尝试恢复失败的代理
      proxy_source:
        description: '代理源类型 (留空则使用所有配置源)'
        required: false
        type: choice
        options:
          - all
          - api
          - file
      threshold:
        description: '触发恢复的代理数量阈值(默认为5)'
        required: false
        type: number
        default: 5
      debug:
        description: '调试模式'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.10"
  TZ: "Asia/Shanghai"

permissions:
  contents: write
  actions: write

defaults:
  run:
    shell: bash

jobs:
  proxy-pool-management:
    name: 管理代理池
    runs-on: ubuntu-latest
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史记录，用于访问代理池状态
      
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "安装必要的依赖..."
            pip install requests pyyaml pandas
          fi
      
      - name: 创建必要目录
        run: |
          mkdir -p data/proxies
          mkdir -p status/proxies
          mkdir -p logs
          
      - name: 加载历史代理状态
        id: load_history
        run: |
          # 检查代理状态文件是否存在
          if [ -f "status/proxies/pool_status.json" ]; then
            echo "发现历史代理池状态文件"
            echo "history_exists=true" >> $GITHUB_OUTPUT
            
            # 获取代理数量统计
            valid_count=$(cat status/proxies/pool_status.json | jq '.stats.valid_count')
            failed_count=$(cat status/proxies/pool_status.json | jq '.stats.failed_count')
            
            echo "历史代理统计: 有效代理 $valid_count 个, 失效代理 $failed_count 个"
            echo "valid_count=$valid_count" >> $GITHUB_OUTPUT
            echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          else
            echo "未发现历史代理池状态"
            echo "history_exists=false" >> $GITHUB_OUTPUT
            echo "valid_count=0" >> $GITHUB_OUTPUT
            echo "failed_count=0" >> $GITHUB_OUTPUT
          fi
      
      - name: 确定操作类型
        id: determine_action
        run: |
          # 获取用户指定的操作或使用默认操作
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            ACTION="${{ github.event.inputs.action }}"
          else
            # 根据历史状态决定默认操作
            if [ "${{ steps.load_history.outputs.valid_count }}" -lt "10" ]; then
              # 如果代理数量少于10，首先尝试恢复，如果恢复不成功再重建
              ACTION="recover"
              FALLBACK="rebuild"
            else
              ACTION="update"
              FALLBACK="validate"
            fi
          fi
          
          echo "执行操作: $ACTION"
          echo "action=$ACTION" >> $GITHUB_OUTPUT
          
          # 确定备用操作
          if [ -n "$FALLBACK" ]; then
            echo "备用操作: $FALLBACK"
            echo "fallback=$FALLBACK" >> $GITHUB_OUTPUT
          fi
          
          # 确定代理源
          if [ "${{ github.event.inputs.proxy_source }}" == "" ] || [ "${{ github.event.inputs.proxy_source }}" == "all" ]; then
            PROXY_SOURCE="all"
          else
            PROXY_SOURCE="${{ github.event.inputs.proxy_source }}"
          fi
          
          echo "代理源: $PROXY_SOURCE"
          echo "proxy_source=$PROXY_SOURCE" >> $GITHUB_OUTPUT
          
          # 确定阈值
          if [ "${{ github.event.inputs.threshold }}" == "" ]; then
            THRESHOLD=5
          else
            THRESHOLD="${{ github.event.inputs.threshold }}"
          fi
          
          echo "恢复阈值: $THRESHOLD"
          echo "threshold=$THRESHOLD" >> $GITHUB_OUTPUT
      
      - name: 运行代理池管理脚本
        id: run_manager
        env:
          PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
          PROXY_SOURCE_URL: ${{ secrets.PROXY_SOURCE_URL }}
          DEBUG_MODE: ${{ github.event.inputs.debug || 'false' }}
        run: |
          # 设置调试模式
          if [ "$DEBUG_MODE" == "true" ]; then
            export LOG_LEVEL=DEBUG
          fi
          
          # 运行对应操作的脚本
          echo "执行操作: ${{ steps.determine_action.outputs.action }}"
          python scripts/proxy_manager.py --action ${{ steps.determine_action.outputs.action }} --source ${{ steps.determine_action.outputs.proxy_source }} --threshold ${{ steps.determine_action.outputs.threshold }}
          
          # 检查执行结果
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "✅ 代理池管理脚本执行成功"
            echo "success=true" >> $GITHUB_OUTPUT
            
            # 检查代理数量是否满足最低要求
            if [ -f "status/proxies/pool_status.json" ]; then
              valid_count=$(cat status/proxies/pool_status.json | jq '.stats.valid_count')
              threshold="${{ steps.determine_action.outputs.threshold }}"
              
              if [ "$valid_count" -lt "$threshold" ] && [ "${{ steps.determine_action.outputs.action }}" == "recover" ]; then
                echo "⚠️ 恢复后代理数量仍低于阈值，需要执行备用操作"
                echo "need_fallback=true" >> $GITHUB_OUTPUT
              else
                echo "need_fallback=false" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "❌ 代理池管理脚本执行失败 (退出代码: $exit_code)"
            echo "success=false" >> $GITHUB_OUTPUT
            
            # 如果主操作失败且有备用操作，标记需要执行备用操作
            if [ -n "${{ steps.determine_action.outputs.fallback }}" ]; then
              echo "⚠️ 主操作失败，需要执行备用操作"
              echo "need_fallback=true" >> $GITHUB_OUTPUT
            else
              echo "need_fallback=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: 运行备用操作
        if: (steps.run_manager.outputs.success == 'false' || steps.run_manager.outputs.need_fallback == 'true') && steps.determine_action.outputs.fallback != ''
        id: run_fallback
        env:
          PROXY_API_KEY: ${{ secrets.PROXY_API_KEY }}
          PROXY_SOURCE_URL: ${{ secrets.PROXY_SOURCE_URL }}
          DEBUG_MODE: ${{ github.event.inputs.debug || 'false' }}
        run: |
          echo "执行备用操作: ${{ steps.determine_action.outputs.fallback }}"
          python scripts/proxy_manager.py --action ${{ steps.determine_action.outputs.fallback }} --source ${{ steps.determine_action.outputs.proxy_source }} --threshold ${{ steps.determine_action.outputs.threshold }}
          
          # 检查执行结果
          exit_code=$?
          if [ $exit_code -eq 0 ]; then
            echo "✅ 备用操作执行成功"
            echo "fallback_success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ 备用操作执行失败 (退出代码: $exit_code)"
            echo "fallback_success=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 提交代理池状态
        if: steps.run_manager.outputs.success == 'true' || steps.run_fallback.outputs.fallback_success == 'true'
        run: |
          # 配置Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 添加状态文件
          git add status/proxies/pool_status.json
          git add data/proxies/
          
          # 提交更改
          if git diff --staged --quiet; then
            echo "没有代理池状态变更，无需提交"
          else
            # 获取当前代理统计
            if [ -f "status/proxies/pool_status.json" ]; then
              valid_count=$(cat status/proxies/pool_status.json | jq '.stats.valid_count')
              failed_count=$(cat status/proxies/pool_status.json | jq '.stats.failed_count')
              
              # 创建提交信息
              commit_msg="🔄 自动更新: 代理池状态"
              
              if [ "${{ steps.run_manager.outputs.success }}" == "true" ]; then
                commit_msg="${commit_msg} (操作:${{ steps.determine_action.outputs.action }})"
              elif [ "${{ steps.run_fallback.outputs.fallback_success }}" == "true" ]; then
                commit_msg="${commit_msg} (操作:${{ steps.determine_action.outputs.fallback }})"
              fi
              
              commit_msg="${commit_msg} (有效:$valid_count, 失效:$failed_count)"
              
              git commit -m "$commit_msg"
              git push
              echo "✅ 成功提交代理池状态更新"
            else
              echo "⚠️ 未找到代理池状态文件，跳过提交"
            fi
          fi
      
      - name: 准备通知内容
        id: prepare_message
        if: always()
        run: |
          if [ -f "status/proxies/pool_status.json" ]; then
            valid_count=$(cat status/proxies/pool_status.json | jq '.stats.valid_count')
            failed_count=$(cat status/proxies/pool_status.json | jq '.stats.failed_count')
            
            if [ "${{ steps.run_manager.outputs.success }}" == "true" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "message<<EOF" >> $GITHUB_OUTPUT
              echo "### ✅ 代理池管理任务完成" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "- **操作**: ${{ steps.determine_action.outputs.action }}" >> $GITHUB_OUTPUT
              echo "- **时间**: $(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT
              echo "- **结果**: 有效代理 $valid_count 个, 失效代理 $failed_count 个" >> $GITHUB_OUTPUT
              echo "- **运行ID**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            elif [ "${{ steps.run_fallback.outputs.fallback_success }}" == "true" ]; then
              echo "status=success" >> $GITHUB_OUTPUT
              echo "message<<EOF" >> $GITHUB_OUTPUT
              echo "### ✅ 代理池管理任务完成 (备用操作)" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "- **主操作**: ${{ steps.determine_action.outputs.action }} (失败)" >> $GITHUB_OUTPUT
              echo "- **备用操作**: ${{ steps.determine_action.outputs.fallback }} (成功)" >> $GITHUB_OUTPUT
              echo "- **时间**: $(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT
              echo "- **结果**: 有效代理 $valid_count 个, 失效代理 $failed_count 个" >> $GITHUB_OUTPUT
              echo "- **运行ID**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              echo "status=failure" >> $GITHUB_OUTPUT
              echo "message<<EOF" >> $GITHUB_OUTPUT
              echo "### ❌ 代理池管理任务失败" >> $GITHUB_OUTPUT
              echo "" >> $GITHUB_OUTPUT
              echo "- **操作**: ${{ steps.determine_action.outputs.action }}" >> $GITHUB_OUTPUT
              if [ -n "${{ steps.determine_action.outputs.fallback }}" ]; then
                echo "- **备用操作**: ${{ steps.determine_action.outputs.fallback }} (也失败)" >> $GITHUB_OUTPUT
              fi
              echo "- **时间**: $(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT
              echo "- **运行ID**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=warning" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "### ⚠️ 代理池管理任务警告" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "- **操作**: ${{ steps.determine_action.outputs.action }}" >> $GITHUB_OUTPUT
            echo "- **问题**: 未找到代理池状态文件" >> $GITHUB_OUTPUT
            echo "- **时间**: $(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_OUTPUT
            echo "- **运行ID**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: 检查钉钉通知配置
        id: check_dingtalk
        if: vars.ENABLE_NOTIFICATION == 'true' && vars.NOTIFICATION_TYPE == 'dingtalk'
        run: |
          echo "has_webhook=true" >> $GITHUB_OUTPUT
      
      - name: 发送通知
        if: steps.check_dingtalk.outputs.has_webhook == 'true'
        uses: fifsky/dingtalk-action@master
        with:
          url: ${{ secrets.DINGTALK_WEBHOOK }}
          type: markdown
          content: ${{ steps.prepare_message.outputs.message }}
          at: all 