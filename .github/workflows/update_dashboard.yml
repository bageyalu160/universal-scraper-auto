name: 更新监控仪表盘数据

on:
  workflow_dispatch:
    inputs:
      site_id:
        description: "站点ID (如 heimao, pm001)"
        required: false
        type: string
  repository_dispatch:
    types:
      - analysis_completed
  # 也可以定时运行
  schedule:
    - cron: "0 */6 * * *" # 每6小时执行一次

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-dashboard:
    name: 更新仪表盘数据
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 创建数据目录
        run: |
          mkdir -p .github/pages/dashboard/data/daily
          mkdir -p .github/pages/dashboard/data/logs

      - name: 收集爬虫统计数据
        id: scraper-stats
        run: |
          # 获取当前日期
          TODAY=$(date -u +"%Y-%m-%d")
          echo "today=$TODAY" >> $GITHUB_OUTPUT

          # 统计近7天的爬虫数据
          TOTAL_COUNT=0
          DATES=()
          COUNTS=()

          for i in {0..6}; do
            DATE=$(date -u -d "$TODAY - $i days" +"%Y-%m-%d")
            DATES+=($DATE)
            
            # 统计当天的数据文件数量和行数
            COUNT=0
            if [ -d "data/daily/$DATE" ]; then
              # 对于JSON文件，统计记录数
              for file in data/daily/$DATE/*.json; do
                if [ -f "$file" ]; then
                  # 提取JSON中的数据数量，这里假设JSON有一个顶层数组或计数字段
                  FILE_COUNT=$(jq -r 'if type=="array" then length elif has("complaints") then .complaints|length elif has("count") then .count else 0 end' "$file" 2>/dev/null || echo "0")
                  COUNT=$((COUNT + FILE_COUNT))
                fi
              done
              
              # 对于CSV/TSV文件，统计行数减去表头
              for file in data/daily/$DATE/*.{csv,tsv}; do
                if [ -f "$file" ]; then
                  FILE_COUNT=$(wc -l < "$file" | xargs)
                  if [ "$FILE_COUNT" -gt 1 ]; then
                    FILE_COUNT=$((FILE_COUNT - 1))  # 减去表头
                    COUNT=$((COUNT + FILE_COUNT))
                  fi
                fi
              done
            fi
            
            COUNTS+=($COUNT)
            # 如果是今天，累加总数
            if [ "$i" -eq 0 ]; then
              TOTAL_COUNT=$COUNT
            fi
          done

          # 创建数据统计JSON
          echo '{
            "dates": ["'${DATES[6]}'","'${DATES[5]}'","'${DATES[4]}'","'${DATES[3]}'","'${DATES[2]}'","'${DATES[1]}'","'${DATES[0]}'"],
            "counts": ['${COUNTS[6]}','${COUNTS[5]}','${COUNTS[4]}','${COUNTS[3]}','${COUNTS[2]}','${COUNTS[1]}','${COUNTS[0]}']
          }' > .github/pages/dashboard/data/data_stats.json

          echo "total_count=$TOTAL_COUNT" >> $GITHUB_OUTPUT

      - name: 收集活跃爬虫信息
        id: crawler-status
        run: |
          # 统计24小时内成功运行的爬虫
          ACTIVE_CRAWLERS=0
          SUCCESS_COUNT=0
          TOTAL_RUNS=0

          # 检查爬虫状态文件
          if [ -f "status/crawler_status.json" ]; then
            # 获取最近状态时间
            STATUS_TIME=$(jq -r '.timestamp' status/crawler_status.json)
            STATUS_DATE=$(date -u -d "$STATUS_TIME" +"%s")
            NOW=$(date -u +"%s")
            
            # 如果状态是24小时内的，计入活跃爬虫
            if [ $((NOW - STATUS_DATE)) -lt 86400 ]; then
              ACTIVE_CRAWLERS=$((ACTIVE_CRAWLERS + 1))
              
              # 统计成功率
              STATUS=$(jq -r '.status' status/crawler_status.json)
              TOTAL_RUNS=$((TOTAL_RUNS + 1))
              if [ "$STATUS" == "success" ]; then
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              fi
            fi
          fi

          # 计算成功率
          if [ "$TOTAL_RUNS" -gt 0 ]; then
            SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_RUNS))
          else
            SUCCESS_RATE=0
          fi

          echo "active_crawlers=$ACTIVE_CRAWLERS" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT

      - name: 收集代理池信息
        id: proxy-stats
        run: |
          AVAILABLE_PROXIES=0

          # 检查代理池文件
          if [ -f "data/proxies.json" ]; then
            cp data/proxies.json .github/pages/dashboard/data/
            
            # 统计可用代理数量
            AVAILABLE_PROXIES=$(jq -r '.working | length' data/proxies.json)
          else
            # 创建空代理池文件
            echo '{"all":[],"working":[],"failed":{},"last_update":""}' > .github/pages/dashboard/data/proxies.json
          fi

          echo "available_proxies=$AVAILABLE_PROXIES" >> $GITHUB_OUTPUT

      - name: 收集任务运行状态
        run: |
          # 创建任务列表
          echo '{"tasks":[]}' > .github/pages/dashboard/data/tasks.json

          # 如果存在爬虫状态文件，添加到任务列表
          TASKS=()

          # 检查黑猫投诉爬虫状态
          if [ -f "status/crawler_status.json" ]; then
            SITE_ID="heimao"
            STATUS=$(jq -r '.status' status/crawler_status.json)
            DATE=$(jq -r '.date' status/crawler_status.json)
            TIMESTAMP=$(jq -r '.timestamp' status/crawler_status.json)
            MESSAGE=$(jq -r '.message' status/crawler_status.json)
            COUNT=$(jq -r 'if has("file_size") then .file_size else 0 end' status/crawler_status.json)
            
            TASKS+=('{"id":"'$SITE_ID'-crawler","name":"黑猫投诉 爬虫任务","site":"'$SITE_ID'","type":"crawler","status":"'$STATUS'","startTime":"'$TIMESTAMP'","endTime":"'$TIMESTAMP'","result":{"status":"'$STATUS'","count":'$COUNT',"message":"'$MESSAGE'"}}')
          fi

          # 检查PM001爬虫状态
          if [ -f "status/pm001_crawler_status.json" ]; then
            SITE_ID="pm001"
            STATUS=$(jq -r '.status' status/pm001_crawler_status.json)
            DATE=$(jq -r '.date' status/pm001_crawler_status.json)
            TIMESTAMP=$(jq -r '.timestamp' status/pm001_crawler_status.json)
            MESSAGE=$(jq -r '.message' status/pm001_crawler_status.json)
            COUNT=$(jq -r 'if has("file_size") then .file_size else 0 end' status/pm001_crawler_status.json)
            
            TASKS+=('{"id":"'$SITE_ID'-crawler","name":"PM001 爬虫任务","site":"'$SITE_ID'","type":"crawler","status":"'$STATUS'","startTime":"'$TIMESTAMP'","endTime":"'$TIMESTAMP'","result":{"status":"'$STATUS'","count":'$COUNT',"message":"'$MESSAGE'"}}')
          fi

          # 检查分析任务状态
          if [ -f "status/analyzer_status.json" ]; then
            SITE_ID=$(jq -r '.site_id' status/analyzer_status.json)
            STATUS=$(jq -r '.status' status/analyzer_status.json)
            DATE=$(jq -r '.date' status/analyzer_status.json)
            TIMESTAMP=$(jq -r '.timestamp' status/analyzer_status.json)
            MESSAGE=$(jq -r '.message' status/analyzer_status.json)
            
            TASKS+=('{"id":"'$SITE_ID'-analyzer","name":"'$SITE_ID' 分析任务","site":"'$SITE_ID'","type":"analyzer","status":"'$STATUS'","startTime":"'$TIMESTAMP'","endTime":"'$TIMESTAMP'","result":{"status":"'$STATUS'","message":"'$MESSAGE'"}}')
          fi

          # 合并任务到JSON
          if [ ${#TASKS[@]} -gt 0 ]; then
            TASKS_JSON=$(printf ",%s" "${TASKS[@]}")
            TASKS_JSON="[${TASKS_JSON:1}]"  # 移除第一个逗号并加上括号
            
            # 更新任务列表
            echo '{"tasks":'$TASKS_JSON'}' > .github/pages/dashboard/data/tasks.json
          fi

      - name: 收集日志
        run: |
          # 复制最近的日志文件
          if [ -d "logs" ]; then
            find logs -name "*.log" -type f -mtime -7 -exec cp {} .github/pages/dashboard/data/logs/ \;
          fi

      - name: 更新状态摘要
        run: |
          # 创建状态摘要文件
          echo '{
            "lastUpdate":"'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
            "activeCrawlers":'${{ steps.crawler-status.outputs.active_crawlers }}',
            "availableProxies":'${{ steps.proxy-stats.outputs.available_proxies }}',
            "successRate":'${{ steps.crawler-status.outputs.success_rate }}',
            "dataCount":'${{ steps.scraper-stats.outputs.total_count }}'
          }' > .github/pages/dashboard/data/status.json

      - name: 更新仪表盘JavaScript
        run: |
          # 确保JavaScript目录存在
          mkdir -p .github/pages/dashboard/js

          # 创建更新脚本，将正确处理仪表盘数据的JavaScript更新为实时数据
          echo '#!/bin/bash
          # 生成真实数据读取的dashboard.js
          cat > .github/pages/dashboard/js/dashboard.js << EOF
          /**
           * 通用爬虫监控系统 - 仪表盘JavaScript
           * 使用真实数据展示
           */
          // 页面加载时初始化仪表盘
          document.addEventListener("DOMContentLoaded", function() {
              // 初始化仪表盘
              initDashboard();
              
              // 设置定时刷新（每60秒）
              setInterval(refreshDashboard, 60000);
              
              // 绑定导航切换事件
              document.getElementById("proxy-tab").addEventListener("click", function(e) {
                  e.preventDefault();
                  window.location.href = "proxy.html";
              });
          });

          /**
           * 初始化仪表盘数据和图表
           */
          async function initDashboard() {
              try {
                  // 加载状态数据
                  const statusResponse = await fetch("data/status.json");
                  const statusData = await statusResponse.json();
                  
                  // 加载任务数据
                  const tasksResponse = await fetch("data/tasks.json");
                  const tasksData = await tasksResponse.json();
                  
                  // 加载代理数据
                  const proxyResponse = await fetch("data/proxies.json");
                  const proxyData = await proxyResponse.json();
                  
                  // 加载数据统计
                  const statsResponse = await fetch("data/data_stats.json");
                  const dataStats = await statsResponse.json();
                  
                  // 更新统计数据
                  updateStats(statusData);
                  
                  // 更新任务表格
                  updateTaskTable(tasksData.tasks);
                  
                  // 更新代理池状态
                  updateProxyStatus(proxyData);
                  
                  // 更新数据统计图表
                  initDataChart(dataStats);
                  
              } catch (error) {
                  console.error("加载仪表盘数据失败:", error);
              }
          }

          // 其他函数...
          EOF
          ' > update_dashboard_js.sh

          # 增加执行权限并运行脚本
          chmod +x update_dashboard_js.sh
          ./update_dashboard_js.sh

          # 复制原始dashboard.js中其余部分
          cat .github/pages/dashboard/js/dashboard.js | grep -A 200 "refreshDashboard" | grep -v "refreshDashboard" >> .github/pages/dashboard/js/dashboard_new.js
          mv .github/pages/dashboard/js/dashboard_new.js .github/pages/dashboard/js/dashboard.js

      - name: 设置Pages
        id: pages
        uses: actions/configure-pages@v3

      - name: 上传构件
        uses: actions/upload-pages-artifact@v1
        with:
          path: ".github/pages"

      - name: 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
