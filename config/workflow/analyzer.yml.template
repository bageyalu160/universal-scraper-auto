name: {{ site_name }} AI分析任务

# 定义何时触发此工作流程
on:
  # 允许手动触发，并接收参数
  workflow_dispatch:
    inputs:
      data_date:
        description: "数据日期 (YYYY-MM-DD格式)"
        required: true
        type: string
      data_file:
        description: "要分析的数据文件路径"
        required: true
        type: string
      site_id:
        description: "网站ID"
        required: true
        type: string
        default: "{{ site_id }}"

  # 也可以通过仓库事件触发
  repository_dispatch:
    types: [crawler_completed]

# 全局环境变量
env:
  PYTHON_VERSION: "{{ python_version }}"
  ANALYSIS_DIR: "{{ analysis_dir }}/daily"

# 定义工作流的权限
permissions:
  # 只需要内容写入权限
  contents: write
  # 添加工作流权限
  actions: write

# 定义工作流中的作业
jobs:
  # 分析作业
  analyze-data:
    name: 分析爬虫数据
    runs-on: ubuntu-latest

    steps:
      # 步骤1: 检出代码
      - name: 检出仓库代码
        uses: actions/checkout@v4
        with:
          # 完整克隆以便进行Git操作
          fetch-depth: 0

      # 步骤2: 设置Python环境
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}
          # 启用依赖缓存
          cache: "pip"

      # 步骤3: 安装依赖
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "安装必要的依赖..."
            pip install {{ analysis_dependencies }}
          fi

      # 步骤4: 确定分析参数
      - name: 确定分析参数
        id: params
        run: |
          # 从参数中获取数据日期和文件路径
          if [ "{% raw %}${{ github.event_name }}{% endraw %}" == "workflow_dispatch" ]; then
            DATA_DATE="{% raw %}${{ github.event.inputs.data_date }}{% endraw %}"
            DATA_FILE="{% raw %}${{ github.event.inputs.data_file }}{% endraw %}"
            SITE_ID="{% raw %}${{ github.event.inputs.site_id }}{% endraw %}"
          elif [ "{% raw %}${{ github.event_name }}{% endraw %}" == "repository_dispatch" ]; then
            DATA_DATE="{% raw %}${{ github.event.client_payload.data_date }}{% endraw %}"
            DATA_FILE="{% raw %}${{ github.event.client_payload.data_file }}{% endraw %}"
            SITE_ID="{% raw %}${{ github.event.client_payload.site_id }}{% endraw %}"
          else
            # 如果没有参数，尝试从状态文件获取最新数据
            if [ -f "{{ status_dir }}/crawler_status.json" ]; then
              DATA_DATE=$(jq -r '.date' {{ status_dir }}/crawler_status.json)
              DATA_FILE=$(jq -r '.file_path' {{ status_dir }}/crawler_status.json)
              SITE_ID="{{ site_id }}"
            else
              echo "错误: 无法确定数据日期和文件路径"
              exit 1
            fi
          fi

          # 确保日期目录存在
          mkdir -p "${ANALYSIS_DIR}/${DATA_DATE}"

          # 检查数据文件是否存在
          if [ ! -f "${DATA_FILE}" ]; then
            echo "错误: 数据文件 ${DATA_FILE} 不存在"
            exit 1
          fi

          # 设置输出参数
          echo "data_date=${DATA_DATE}" >> $GITHUB_OUTPUT
          echo "data_file=${DATA_FILE}" >> $GITHUB_OUTPUT
          echo "site_id=${SITE_ID}" >> $GITHUB_OUTPUT
          echo "analysis_dir=${ANALYSIS_DIR}/${DATA_DATE}" >> $GITHUB_OUTPUT
          echo "设置分析参数: 日期=${DATA_DATE}, 文件=${DATA_FILE}, 站点=${SITE_ID}"

      # 步骤5: 运行AI分析
      - name: 运行AI分析
        id: run-analysis
        continue-on-error: true
        env:
{% for env_var in env_vars %}
          {{ env_var.name }}: {% raw %}${{ secrets.{% endraw %}{{ env_var.secret }}{% raw %} }}{% endraw %}
{% endfor %}
          # 可选环境变量，使用GitHub Variables
          HEIMAO_KEYWORDS: {% raw %}${{ vars.HEIMAO_KEYWORDS || '' }}{% endraw %}
          ENABLE_NOTIFICATION: {% raw %}${{ vars.ENABLE_NOTIFICATION || 'false' }}{% endraw %}
          NOTIFICATION_TYPE: {% raw %}${{ vars.NOTIFICATION_TYPE || 'none' }}{% endraw %}
          NOTIFICATION_WEBHOOK: {% raw %}${{ vars.NOTIFICATION_WEBHOOK || '' }}{% endraw %}
          GITHUB_REPOSITORY: {% raw %}${{ github.repository }}{% endraw %}
        run: |
          echo "开始分析数据文件: {% raw %}${{ steps.params.outputs.data_file }}{% endraw %}"

          # 运行AI分析脚本
          python {{ analyzer_script }} --file "{% raw %}${{ steps.params.outputs.data_file }}{% endraw %}" --site "{% raw %}${{ steps.params.outputs.site_id }}{% endraw %}" --output "{{ output_file }}"

          # 检查分析结果文件
          if [ -f "{{ output_file }}" ]; then
            echo "分析成功完成，发现结果文件"
            echo "analysis_exists=true" >> $GITHUB_OUTPUT
            
            # 复制到日期目录
            cp {{ output_file }} "{% raw %}${{ steps.params.outputs.analysis_dir }}{% endraw %}/analysis_{% raw %}${{ steps.params.outputs.data_date }}{% endraw %}.{{ output_extension }}"
            echo "分析结果已保存到日期目录"
          else
            echo "警告：未找到分析结果文件"
            echo "analysis_exists=false" >> $GITHUB_OUTPUT
          fi

      # 步骤6: 创建分析状态文件
      - name: 创建分析状态文件
        run: |
          mkdir -p {{ status_dir }}
          # 创建状态文件
          if [ "{% raw %}${{ steps.run-analysis.outcome }}{% endraw %}" == "success" ] && [ "{% raw %}${{ steps.run-analysis.outputs.analysis_exists }}{% endraw %}" == "true" ]; then
            echo '{
              "status": "success",
              "site_id": "{% raw %}${{ steps.params.outputs.site_id }}{% endraw %}",
              "date": "{% raw %}${{ steps.params.outputs.data_date }}{% endraw %}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "data_file": "{% raw %}${{ steps.params.outputs.data_file }}{% endraw %}",
              "analysis_file": "{% raw %}${{ steps.params.outputs.analysis_dir }}{% endraw %}/analysis_{% raw %}${{ steps.params.outputs.data_date }}{% endraw %}.{{ output_extension }}",
              "message": "数据分析成功完成"
            }' > {{ status_dir }}/analyzer_status.json
          else
            echo '{
              "status": "failed",
              "site_id": "{% raw %}${{ steps.params.outputs.site_id }}{% endraw %}",
              "date": "{% raw %}${{ steps.params.outputs.data_date }}{% endraw %}",
              "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "data_file": "{% raw %}${{ steps.params.outputs.data_file }}{% endraw %}",
              "message": "数据分析失败或无结果"
            }' > {{ status_dir }}/analyzer_status.json
          fi
          echo "已创建分析状态文件"

      # 步骤7: 提交分析结果和状态到仓库
      - name: 提交分析结果和状态
        run: |
          echo "正在提交分析结果和状态..."
          # 设置git配置
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # 添加需要提交的文件
          if [ -f "{{ output_file }}" ]; then
            git add {{ output_file }}
          fi
          git add "{% raw %}${{ steps.params.outputs.analysis_dir }}{% endraw %}/" || echo "没有分析目录变更"
          git add {{ status_dir }}/analyzer_status.json

          # 检查是否有变更需要提交
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
          else
            # 创建提交
            git commit -m "自动更新：{{ site_name }}分析结果 {% raw %}${{ steps.params.outputs.data_date }}{% endraw %}"
            # 推送到仓库
            git push
            echo "成功提交并推送分析结果和状态"
          fi

      {% if send_notification %}
      # 步骤8: 发送通知
      - name: 发送通知
        if: {% raw %}steps.run-analysis.outputs.analysis_exists == 'true'{% endraw %}
        env:
          ENABLE_NOTIFICATION: {% raw %}${{ vars.ENABLE_NOTIFICATION || 'false' }}{% endraw %}
          NOTIFICATION_TYPE: {% raw %}${{ vars.NOTIFICATION_TYPE || 'none' }}{% endraw %}
          NOTIFICATION_WEBHOOK: {% raw %}${{ vars.NOTIFICATION_WEBHOOK || '' }}{% endraw %}
        run: |
          echo "发送分析结果通知..."
          python {{ notification_script }} --file "{% raw %}${{ steps.params.outputs.analysis_dir }}{% endraw %}/analysis_{% raw %}${{ steps.params.outputs.data_date }}{% endraw %}.{{ output_extension }}" --site "{% raw %}${{ steps.params.outputs.site_id }}{% endraw %}"
      {% endif %} 

      # 步骤9: 触发仪表盘更新工作流
      - name: 触发仪表盘更新工作流
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: update_dashboard.yml
          token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          inputs: '{"site_id": "{% raw %}${{ steps.params.outputs.site_id }}{% endraw %}"}'
        if: {% raw %}steps.run-analysis.outputs.analysis_exists == 'true'{% endraw %} 