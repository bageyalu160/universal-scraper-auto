name: {{ site_name }} AI分析任务

# 工作流运行名称（动态生成）
run-name: "🧠 {{ site_name }}分析 #${{ github.run_number }} (${{ github.actor }} 触发)"

# 定义何时触发此工作流程
on:
  # 允许手动触发，并接收参数
  workflow_dispatch:
    inputs:
      data_date:
        description: "数据日期 (YYYY-MM-DD格式)"
        required: true
        type: string
      data_file:
        description: "要分析的数据文件路径"
        required: true
        type: string
      site_id:
        description: "网站ID"
        required: true
        type: string
        default: "{{ site_id }}"
      model:
        description: "AI模型选择"
        required: false
        type: choice
        default: "default"
        options:
          - default
          - gemini-1.5-pro
          - gpt-4-turbo

  # 也可以通过仓库事件触发
  repository_dispatch:
    types: [crawler_completed]
  
  # 可被其他工作流调用
  workflow_call:
    inputs:
      data_date:
        description: "数据日期"
        required: true
        type: string
      data_file:
        description: "数据文件路径"
        required: true
        type: string
      site_id:
        description: "网站ID"
        required: true
        type: string
        default: "{{ site_id }}"
    secrets:
      API_KEY:
        required: false

# 全局环境变量
env:
  PYTHON_VERSION: "{{ python_version }}"
  ANALYSIS_DIR: "{{ analysis_dir }}/daily"
  SITE_ID: "{{ site_id }}"
  TZ: "Asia/Shanghai"

# 定义工作流的权限
permissions:
  contents: write  # 允许推送到仓库
  actions: write   # 允许触发其他工作流

# 全局默认配置
defaults:
  run:
    shell: bash

# 并发控制 - 避免相同站点的任务并行运行
concurrency:
  group: analyzer-{{ site_id }}-{% raw %}${{ github.ref }}{% endraw %}
  cancel-in-progress: true

jobs:
  # 预检查作业
  pre-check:
    name: 准备分析环境
    runs-on: ubuntu-latest
    outputs:
      data_date: {% raw %}${{ steps.params.outputs.data_date }}{% endraw %}
      data_file: {% raw %}${{ steps.params.outputs.data_file }}{% endraw %}
      site_id: {% raw %}${{ steps.params.outputs.site_id }}{% endraw %}
      analysis_dir: {% raw %}${{ steps.params.outputs.analysis_dir }}{% endraw %}
      cache_key: {% raw %}${{ steps.params.outputs.cache_key }}{% endraw %}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 确定分析参数
        id: params
        run: |
          # 从参数中获取数据日期和文件路径
          if [ "{% raw %}${{ github.event_name }}{% endraw %}" == "workflow_dispatch" ]; then
            DATA_DATE="{% raw %}${{ github.event.inputs.data_date }}{% endraw %}"
            DATA_FILE="{% raw %}${{ github.event.inputs.data_file }}{% endraw %}"
            SITE_ID="{% raw %}${{ github.event.inputs.site_id }}{% endraw %}"
          elif [ "{% raw %}${{ github.event_name }}{% endraw %}" == "repository_dispatch" ]; then
            DATA_DATE="{% raw %}${{ github.event.client_payload.data_date }}{% endraw %}"
            DATA_FILE="{% raw %}${{ github.event.client_payload.data_file }}{% endraw %}"
            SITE_ID="{% raw %}${{ github.event.client_payload.site_id }}{% endraw %}"
          elif [ "{% raw %}${{ github.event_name }}{% endraw %}" == "workflow_call" ]; then
            DATA_DATE="{% raw %}${{ inputs.data_date }}{% endraw %}"
            DATA_FILE="{% raw %}${{ inputs.data_file }}{% endraw %}"
            SITE_ID="{% raw %}${{ inputs.site_id }}{% endraw %}"
          else
            # 如果没有参数，尝试从状态文件获取最新数据
            if [ -f "{{ status_dir }}/crawler_status.json" ]; then
              DATA_DATE=$(jq -r '.date' {{ status_dir }}/crawler_status.json)
              DATA_FILE=$(jq -r '.file_path' {{ status_dir }}/crawler_status.json)
              SITE_ID="{{ site_id }}"
            else
              echo "❌ 错误: 无法确定数据日期和文件路径"
              exit 1
            fi
          fi
          
          # 确保日期目录存在
          mkdir -p "${ANALYSIS_DIR}/${DATA_DATE}"
          
          # 设置输出参数
          echo "data_date=${DATA_DATE}" >> $GITHUB_OUTPUT
          echo "data_file=${DATA_FILE}" >> $GITHUB_OUTPUT
          echo "site_id=${SITE_ID}" >> $GITHUB_OUTPUT
          echo "analysis_dir=${ANALYSIS_DIR}/${DATA_DATE}" >> $GITHUB_OUTPUT
          
          # 生成缓存键
          if [ -f "requirements.txt" ]; then
            HASH=$(sha256sum requirements.txt | cut -d ' ' -f 1 | head -c 8)
            echo "cache_key=deps-analysis-$HASH-v1" >> $GITHUB_OUTPUT
          else
            echo "cache_key=deps-analysis-default-v1" >> $GITHUB_OUTPUT
          fi
          
          echo "📌 设置分析参数: 日期=${DATA_DATE}, 文件=${DATA_FILE}, 站点=${SITE_ID}"
      
      - name: 检查数据文件是否存在
        run: |
          if [ ! -f "{% raw %}${{ steps.params.outputs.data_file }}{% endraw %}" ]; then
            echo "❌ 错误: 数据文件 {% raw %}${{ steps.params.outputs.data_file }}{% endraw %} 不存在"
            exit 1
          else
            echo "✅ 数据文件存在，准备分析"
          fi

  # 分析作业
  analyze:
    name: 执行AI分析
    needs: pre-check
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      DATA_DATE: {% raw %}${{ needs.pre-check.outputs.data_date }}{% endraw %}
      DATA_FILE: {% raw %}${{ needs.pre-check.outputs.data_file }}{% endraw %}
      SITE_ID: {% raw %}${{ needs.pre-check.outputs.site_id }}{% endraw %}
      ANALYSIS_DIR: {% raw %}${{ needs.pre-check.outputs.analysis_dir }}{% endraw %}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Python环境
        uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}
          cache: "pip"
          cache-dependency-path: "**/requirements.txt"
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "安装必要的依赖..."
            pip install {{ analysis_dependencies }}
          fi
      
      - name: 运行AI分析
        id: run_analysis
        continue-on-error: true
        env:
{% for env_var in env_vars %}
          {{ env_var.name }}: {% raw %}${{ secrets.{% endraw %}{{ env_var.secret }}{% raw %} }}{% endraw %}
{% endfor %}
          # 可选环境变量
          MODEL: {% raw %}${{ github.event.inputs.model || 'default' }}{% endraw %}
          HEIMAO_KEYWORDS: {% raw %}${{ vars.HEIMAO_KEYWORDS || '' }}{% endraw %}
          ENABLE_NOTIFICATION: {% raw %}${{ vars.ENABLE_NOTIFICATION || 'false' }}{% endraw %}
          NOTIFICATION_TYPE: {% raw %}${{ vars.NOTIFICATION_TYPE || 'none' }}{% endraw %}
          NOTIFICATION_WEBHOOK: {% raw %}${{ vars.NOTIFICATION_WEBHOOK || '' }}{% endraw %}
          GITHUB_REPOSITORY: {% raw %}${{ github.repository }}{% endraw %}
        run: |
          echo "📊 开始分析数据文件: $DATA_FILE"
          
          # 指定模型配置
          if [ "$MODEL" != "default" ]; then
            MODEL_ARG="--model $MODEL"
            echo "🧠 使用指定模型: $MODEL"
          else
            MODEL_ARG=""
            echo "🧠 使用默认模型"
          fi
          
          # 运行AI分析脚本
          python {{ analyzer_script }} --file "$DATA_FILE" --site "$SITE_ID" --output "$ANALYSIS_DIR/analysis_$DATA_DATE.{{ output_extension }}" $MODEL_ARG
          
          # 检查分析结果文件
          if [ -f "$ANALYSIS_DIR/analysis_$DATA_DATE.{{ output_extension }}" ]; then
            echo "✅ 分析成功完成，已生成结果文件"
            echo "analysis_exists=true" >> $GITHUB_OUTPUT
            echo "analysis_file=$ANALYSIS_DIR/analysis_$DATA_DATE.{{ output_extension }}" >> $GITHUB_OUTPUT
          else
            echo "⚠️ 警告：未找到分析结果文件"
            echo "analysis_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: 创建分析状态文件
        run: |
          mkdir -p {{ status_dir }}
          # 创建状态文件
          if [ "{% raw %}${{ steps.run_analysis.outcome }}{% endraw %}" == "success" ] && [ "{% raw %}${{ steps.run_analysis.outputs.analysis_exists }}{% endraw %}" == "true" ]; then
            cat > {{ status_dir }}/analyzer_$SITE_ID.json << EOF
            {
              "status": "success",
              "site_id": "$SITE_ID",
              "date": "$DATA_DATE",
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "data_file": "$DATA_FILE",
              "analysis_file": "$ANALYSIS_DIR/analysis_$DATA_DATE.{{ output_extension }}",
              "run_id": "{% raw %}${{ github.run_id }}{% endraw %}",
              "run_url": "{% raw %}${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}{% endraw %}",
              "message": "数据分析成功完成"
            }
            EOF
          else
            cat > {{ status_dir }}/analyzer_$SITE_ID.json << EOF
            {
              "status": "failed",
              "site_id": "$SITE_ID",
              "date": "$DATA_DATE",
              "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "data_file": "$DATA_FILE",
              "run_id": "{% raw %}${{ github.run_id }}{% endraw %}",
              "run_url": "{% raw %}${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}{% endraw %}",
              "message": "数据分析失败或无结果"
            }
            EOF
          fi
          echo "已创建分析状态文件"
      
      - name: 提交分析结果和状态
        run: |
          echo "正在提交分析结果和状态..."
          # 设置git配置
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 添加需要提交的文件
          if [ -f "$ANALYSIS_DIR/analysis_$DATA_DATE.{{ output_extension }}" ]; then
            git add "$ANALYSIS_DIR/" || echo "没有分析目录变更"
          fi
          git add {{ status_dir }}/analyzer_$SITE_ID.json
          
          # 检查是否有变更需要提交
          if git diff --staged --quiet; then
            echo "没有变更需要提交"
          else
            # 创建提交
            git commit -m "🤖 自动更新: {{ site_name }}分析结果 ($DATA_DATE)"
            # 推送到仓库
            git push
            echo "✅ 成功提交并推送分析结果和状态"
          fi
      
      - name: 上传分析结果 (作为工件)
        if: {% raw %}steps.run_analysis.outputs.analysis_exists == 'true'{% endraw %}
        uses: actions/upload-artifact@v4
        with:
          name: {{ site_id }}-analysis-${% raw %}{{ needs.pre-check.outputs.data_date }}{% endraw %}
          path: {% raw %}${{ steps.run_analysis.outputs.analysis_file }}{% endraw %}
          retention-days: 5

      {% if send_notification %}
      # 发送通知
      - name: 发送分析结果通知
        if: {% raw %}steps.run_analysis.outputs.analysis_exists == 'true'{% endraw %}
        env:
          ENABLE_NOTIFICATION: {% raw %}${{ vars.ENABLE_NOTIFICATION || 'false' }}{% endraw %}
          NOTIFICATION_TYPE: {% raw %}${{ vars.NOTIFICATION_TYPE || 'none' }}{% endraw %}
          NOTIFICATION_WEBHOOK: {% raw %}${{ vars.NOTIFICATION_WEBHOOK || '' }}{% endraw %}
          ANALYSIS_FILE: {% raw %}${{ steps.run_analysis.outputs.analysis_file }}{% endraw %}
        run: |
          if [ "$ENABLE_NOTIFICATION" = "true" ] && [ -n "$NOTIFICATION_WEBHOOK" ]; then
            echo "📢 发送分析结果通知..."
            python {{ notification_script }} --file "$ANALYSIS_FILE" --site "$SITE_ID"
          else
            echo "ℹ️ 未启用通知或缺少配置，跳过通知发送"
          fi
      {% endif %}
      
      # 触发仪表盘更新工作流
      - name: 触发仪表盘更新工作流
        if: {% raw %}steps.run_analysis.outputs.analysis_exists == 'true'{% endraw %}
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: update_dashboard.yml
          token: {% raw %}${{ secrets.GITHUB_TOKEN }}{% endraw %}
          inputs: '{"site_id": "{% raw %}${{ needs.pre-check.outputs.site_id }}{% endraw %}"}'

  # 通知作业
  notify:
    name: 发送通知
    needs: [pre-check, analyze]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        if: {% raw %}contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled'){% endraw %}
        uses: actions/checkout@v4
      
      - name: 准备通知内容
        id: prepare_message
        run: |
          if [[ "{% raw %}${{ needs.analyze.result }}{% endraw %}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=#00FF00" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "### ✅ {{ site_name }}分析任务成功" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "- **站点**: {{ site_name }}" >> $GITHUB_OUTPUT
            echo "- **日期**: {% raw %}${{ needs.pre-check.outputs.data_date }}{% endraw %}" >> $GITHUB_OUTPUT
            echo "- **运行ID**: [#{% raw %}${{ github.run_number }}{% endraw %}]({% raw %}${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}{% endraw %})" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=#FF0000" >> $GITHUB_OUTPUT
            echo "message<<EOF" >> $GITHUB_OUTPUT
            echo "### ❌ {{ site_name }}分析任务失败" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "- **站点**: {{ site_name }}" >> $GITHUB_OUTPUT
            echo "- **日期**: {% raw %}${{ needs.pre-check.outputs.data_date }}{% endraw %}" >> $GITHUB_OUTPUT
            echo "- **失败阶段**: {% raw %}${{ needs.analyze.result == 'failure' && 'Analysis' || 'Pre-Check' }}{% endraw %}" >> $GITHUB_OUTPUT
            echo "- **运行ID**: [#{% raw %}${{ github.run_number }}{% endraw %}]({% raw %}${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}{% endraw %})" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
      
      - name: 发送钉钉通知
        if: {% raw %}vars.ENABLE_NOTIFICATION == 'true' && vars.NOTIFICATION_TYPE == 'dingtalk' && secrets.DINGTALK_WEBHOOK != ''{% endraw %}
        uses: fifsky/dingtalk-action@master
        with:
          url: {% raw %}${{ secrets.DINGTALK_WEBHOOK }}{% endraw %}
          type: markdown
          content: |
            {% raw %}${{ steps.prepare_message.outputs.message }}{% endraw %}
      
      - name: 发送企业微信通知
        if: {% raw %}vars.ENABLE_NOTIFICATION == 'true' && vars.NOTIFICATION_TYPE == 'wechat' && secrets.WECHAT_WEBHOOK != ''{% endraw %}
        uses: chf007/action-wechat-work@master
        with:
          msgtype: markdown
          content: {% raw %}${{ steps.prepare_message.outputs.message }}{% endraw %}
          key: {% raw %}${{ secrets.WECHAT_WEBHOOK }}{% endraw %} 