  // 生成智能调度步骤
  generateSmartSchedulingStep(workflow_type, id)::
    {
      name: '智能调度分析',
      id: 'smart_scheduling',
      run: |||
        # 创建指标目录（如果不存在）
        mkdir -p metrics/workflow
        
        echo "🧠 开始智能调度分析..."
        
        # 检查历史指标文件
        METRICS_DIR="metrics/workflow"
        METRICS_PATTERN="%(workflow_type)s_%(id)s_*.json"
        
        # 查找所有历史指标文件
        HISTORY_FILES=$(find $METRICS_DIR -name "$METRICS_PATTERN" 2>/dev/null | sort)
        HISTORY_COUNT=$(echo "$HISTORY_FILES" | wc -l)
        
        if [ "$HISTORY_COUNT" -lt 5 ]; then
          echo "⚠️ 历史数据不足，需要至少5个历史记录进行智能调度分析"
          echo "当前仅有 $HISTORY_COUNT 个历史记录"
          echo "scheduling_recommendation=default" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "📊 找到 $HISTORY_COUNT 个历史记录，开始分析..."
        
        # 分析执行时间模式
        TOTAL_DURATION=0
        SUCCESS_COUNT=0
        FAILURE_COUNT=0
        MAX_DURATION=0
        MIN_DURATION=999999
        
        # 按时间段统计成功率
        MORNING_SUCCESS=0
        MORNING_TOTAL=0
        AFTERNOON_SUCCESS=0
        AFTERNOON_TOTAL=0
        EVENING_SUCCESS=0
        EVENING_TOTAL=0
        NIGHT_SUCCESS=0
        NIGHT_TOTAL=0
        
        # 分析每个指标文件
        for FILE in $HISTORY_FILES; do
          if [ -f "$FILE" ]; then
            # 提取关键指标
            DURATION=$(jq -r '.duration_seconds' "$FILE")
            STATUS=$(jq -r '.status' "$FILE")
            START_TIME=$(jq -r '.start_time' "$FILE")
            
            # 统计总时长
            TOTAL_DURATION=$((TOTAL_DURATION + DURATION))
            
            # 更新最大/最小时长
            if [ $DURATION -gt $MAX_DURATION ]; then
              MAX_DURATION=$DURATION
            fi
            
            if [ $DURATION -lt $MIN_DURATION ]; then
              MIN_DURATION=$DURATION
            fi
            
            # 统计成功/失败次数
            if [ "$STATUS" == "success" ]; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
              
              # 提取小时
              HOUR=$(date -d "$START_TIME" "+%H" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$START_TIME" "+%H" 2>/dev/null || echo "0")
              
              # 按时间段统计
              if [ $HOUR -ge 6 ] && [ $HOUR -lt 12 ]; then
                MORNING_SUCCESS=$((MORNING_SUCCESS + 1))
                MORNING_TOTAL=$((MORNING_TOTAL + 1))
              elif [ $HOUR -ge 12 ] && [ $HOUR -lt 18 ]; then
                AFTERNOON_SUCCESS=$((AFTERNOON_SUCCESS + 1))
                AFTERNOON_TOTAL=$((AFTERNOON_TOTAL + 1))
              elif [ $HOUR -ge 18 ] && [ $HOUR -lt 24 ]; then
                EVENING_SUCCESS=$((EVENING_SUCCESS + 1))
                EVENING_TOTAL=$((EVENING_TOTAL + 1))
              else
                NIGHT_SUCCESS=$((NIGHT_SUCCESS + 1))
                NIGHT_TOTAL=$((NIGHT_TOTAL + 1))
              fi
            else
              FAILURE_COUNT=$((FAILURE_COUNT + 1))
              
              # 提取小时（对于失败的情况）
              HOUR=$(date -d "$START_TIME" "+%H" 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%SZ" "$START_TIME" "+%H" 2>/dev/null || echo "0")
              
              # 按时间段统计总数
              if [ $HOUR -ge 6 ] && [ $HOUR -lt 12 ]; then
                MORNING_TOTAL=$((MORNING_TOTAL + 1))
              elif [ $HOUR -ge 12 ] && [ $HOUR -lt 18 ]; then
                AFTERNOON_TOTAL=$((AFTERNOON_TOTAL + 1))
              elif [ $HOUR -ge 18 ] && [ $HOUR -lt 24 ]; then
                EVENING_TOTAL=$((EVENING_TOTAL + 1))
              else
                NIGHT_TOTAL=$((NIGHT_TOTAL + 1))
              fi
            fi
          fi
        done
        
        # 计算平均执行时间
        if [ $HISTORY_COUNT -gt 0 ]; then
          AVG_DURATION=$((TOTAL_DURATION / HISTORY_COUNT))
        else
          AVG_DURATION=0
        fi
        
        # 计算成功率
        if [ $HISTORY_COUNT -gt 0 ]; then
          SUCCESS_RATE=$((SUCCESS_COUNT * 100 / HISTORY_COUNT))
        else
          SUCCESS_RATE=0
        fi
        
        # 计算各时段成功率
        if [ $MORNING_TOTAL -gt 0 ]; then
          MORNING_RATE=$((MORNING_SUCCESS * 100 / MORNING_TOTAL))
        else
          MORNING_RATE=0
        fi
        
        if [ $AFTERNOON_TOTAL -gt 0 ]; then
          AFTERNOON_RATE=$((AFTERNOON_SUCCESS * 100 / AFTERNOON_TOTAL))
        else
          AFTERNOON_RATE=0
        fi
        
        if [ $EVENING_TOTAL -gt 0 ]; then
          EVENING_RATE=$((EVENING_SUCCESS * 100 / EVENING_TOTAL))
        else
          EVENING_RATE=0
        fi
        
        if [ $NIGHT_TOTAL -gt 0 ]; then
          NIGHT_RATE=$((NIGHT_SUCCESS * 100 / NIGHT_TOTAL))
        else
          NIGHT_RATE=0
        fi
        
        # 输出分析结果
        echo "📈 分析结果:"
        echo "- 平均执行时间: $AVG_DURATION 秒"
        echo "- 最长执行时间: $MAX_DURATION 秒"
        echo "- 最短执行时间: $MIN_DURATION 秒"
        echo "- 总成功率: $SUCCESS_RATE%"
        echo "- 上午成功率(6-12点): $MORNING_RATE% (成功: $MORNING_SUCCESS, 总数: $MORNING_TOTAL)"
        echo "- 下午成功率(12-18点): $AFTERNOON_RATE% (成功: $AFTERNOON_SUCCESS, 总数: $AFTERNOON_TOTAL)"
        echo "- 晚上成功率(18-24点): $EVENING_RATE% (成功: $EVENING_SUCCESS, 总数: $EVENING_TOTAL)"
        echo "- 凌晨成功率(0-6点): $NIGHT_RATE% (成功: $NIGHT_SUCCESS, 总数: $NIGHT_TOTAL)"
        
        # 确定最佳执行时段
        BEST_RATE=0
        BEST_TIME="morning"
        
        if [ $MORNING_RATE -gt $BEST_RATE ] && [ $MORNING_TOTAL -ge 3 ]; then
          BEST_RATE=$MORNING_RATE
          BEST_TIME="morning"
        fi
        
        if [ $AFTERNOON_RATE -gt $BEST_RATE ] && [ $AFTERNOON_TOTAL -ge 3 ]; then
          BEST_RATE=$AFTERNOON_RATE
          BEST_TIME="afternoon"
        fi
        
        if [ $EVENING_RATE -gt $BEST_RATE ] && [ $EVENING_TOTAL -ge 3 ]; then
          BEST_RATE=$EVENING_RATE
          BEST_TIME="evening"
        fi
        
        if [ $NIGHT_RATE -gt $BEST_RATE ] && [ $NIGHT_TOTAL -ge 3 ]; then
          BEST_RATE=$NIGHT_RATE
          BEST_TIME="night"
        fi
        
        # 根据最佳时段生成cron表达式
        case $BEST_TIME in
          morning)
            CRON_EXPR="0 9 * * *"  # 上午9点
            TIME_DESC="上午9点"
            ;;
          afternoon)
            CRON_EXPR="0 14 * * *"  # 下午2点
            TIME_DESC="下午2点"
            ;;
          evening)
            CRON_EXPR="0 20 * * *"  # 晚上8点
            TIME_DESC="晚上8点"
            ;;
          night)
            CRON_EXPR="0 2 * * *"  # 凌晨2点
            TIME_DESC="凌晨2点"
            ;;
          *)
            CRON_EXPR="0 0 * * *"  # 默认午夜
            TIME_DESC="午夜12点"
            ;;
        esac
        
        # 根据成功率调整执行频率
        if [ $SUCCESS_RATE -lt 50 ]; then
          # 成功率低于50%，减少执行频率
          FREQ_RECOMMENDATION="减少执行频率，建议每周执行一次"
          CRON_EXPR="0 $CRON_EXPR | cut -d' ' -f2-) * * 0"  # 每周日
        elif [ $SUCCESS_RATE -gt 90 ]; then
          # 成功率高于90%，可以增加执行频率
          FREQ_RECOMMENDATION="成功率高，可以增加执行频率，建议每天执行"
        else
          # 成功率适中，维持当前频率
          FREQ_RECOMMENDATION="成功率适中，维持当前执行频率"
        fi
        
        echo "🔮 调度建议:"
        echo "- 最佳执行时段: $BEST_TIME ($TIME_DESC)"
        echo "- 建议的cron表达式: $CRON_EXPR"
        echo "- 频率建议: $FREQ_RECOMMENDATION"
        
        # 保存调度建议到输出
        echo "scheduling_recommendation=$BEST_TIME" >> $GITHUB_OUTPUT
        echo "cron_expression=$CRON_EXPR" >> $GITHUB_OUTPUT
        
        # 创建调度配置文件
        cat > metrics/workflow/%(workflow_type)s_%(id)s_schedule.json << EOF
        {
          "workflow_type": "%(workflow_type)s",
          "id": "%(id)s",
          "best_time": "$BEST_TIME",
          "cron_expression": "$CRON_EXPR",
          "success_rate": $SUCCESS_RATE,
          "avg_duration": $AVG_DURATION,
          "morning_rate": $MORNING_RATE,
          "afternoon_rate": $AFTERNOON_RATE,
          "evening_rate": $EVENING_RATE,
          "night_rate": $NIGHT_RATE,
          "recommendation": "$FREQ_RECOMMENDATION",
          "last_updated": "$(date -u +%%Y-%%m-%%dT%%H:%%M:%%SZ)"
        }
        EOF
        
        echo "✅ 调度配置已保存到 metrics/workflow/%(workflow_type)s_%(id)s_schedule.json"
        
        # 提交调度配置
        if [ "${{ github.event_name }}" != "pull_request" ]; then
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add metrics/workflow/%(workflow_type)s_%(id)s_schedule.json
          git commit -m "⏱️ 更新智能调度配置: %(workflow_type)s_%(id)s" || echo "没有更改需要提交"
          git pull --rebase origin main || echo "拉取失败，继续执行"
          git push || echo "推送失败，但继续执行"
        fi
      ||| % {workflow_type: workflow_type, id: id}
    },
    
  // 生成应用智能调度的步骤
  generateApplyScheduleStep(workflow_type, id)::
    {
      name: '应用智能调度',
      id: 'apply_schedule',
      needs: ['smart_scheduling'],
      run: |||
        # 检查是否有调度建议
        SCHEDULE_RECOMMENDATION="${{ needs.smart_scheduling.outputs.scheduling_recommendation }}"
        CRON_EXPRESSION="${{ needs.smart_scheduling.outputs.cron_expression }}"
        
        if [ -z "$SCHEDULE_RECOMMENDATION" ] || [ "$SCHEDULE_RECOMMENDATION" == "default" ]; then
          echo "⚠️ 没有足够的历史数据进行智能调度，使用默认调度"
          exit 0
        fi
        
        echo "🔄 应用智能调度: $SCHEDULE_RECOMMENDATION ($CRON_EXPRESSION)"
        
        # 更新工作流文件中的调度表达式
        # 注意：这里需要根据实际的工作流文件结构进行调整
        WORKFLOW_FILE=".github/workflows/%(workflow_type)s_%(id)s.yml"
        
        if [ -f "$WORKFLOW_FILE" ]; then
          # 备份原文件
          cp "$WORKFLOW_FILE" "$WORKFLOW_FILE.bak"
          
          # 更新cron表达式
          # 这里使用sed命令替换cron表达式，需要根据实际文件格式调整
          sed -i.tmp "s/cron: '[^']*'/cron: '$CRON_EXPRESSION'/" "$WORKFLOW_FILE" || \
          sed -i "s/cron: '[^']*'/cron: '$CRON_EXPRESSION'/" "$WORKFLOW_FILE"
          
          # 清理临时文件
          rm -f "$WORKFLOW_FILE.tmp"
          
          echo "✅ 已更新工作流调度配置"
          
          # 提交更改
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$WORKFLOW_FILE"
            git commit -m "⏱️ 自动更新工作流调度: %(workflow_type)s_%(id)s" || echo "没有更改需要提交"
            git pull --rebase origin main || echo "拉取失败，继续执行"
            git push || echo "推送失败，但继续执行"
          fi
        else
          echo "⚠️ 工作流文件不存在: $WORKFLOW_FILE"
        fi
      ||| % {workflow_type: workflow_type, id: id}
    },
